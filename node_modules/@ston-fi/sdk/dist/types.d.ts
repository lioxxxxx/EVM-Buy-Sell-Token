import TonWeb, { ContractOptions as TW_ContractOptions, JettonMinterOptions as TW_JettonMinterOptions, NftItemOptions as TW_NftItemOptions, NftCollectionOptions as TW_NftCollectionOptions } from 'tonweb';
export declare type Address = InstanceType<typeof TonWeb.utils.Address>;
export declare type Cell = InstanceType<typeof TonWeb.boc.Cell>;
export declare type BitString = InstanceType<typeof TonWeb.boc.BitString>;
export declare type Contract = InstanceType<typeof TonWeb.Contract>;
export declare type HttpProvider = InstanceType<typeof TonWeb.HttpProvider>;
export declare type JettonMinter = InstanceType<typeof TonWeb.token.ft.JettonMinter>;
export declare type JettonWallet = InstanceType<typeof TonWeb.token.ft.JettonWallet>;
export declare type BN = InstanceType<typeof TonWeb.utils.BN>;
export declare type AddressType = ConstructorParameters<typeof TonWeb.utils.Address>[0];
export declare type QueryIdType = number | BN;
export declare type AmountType = ConstructorParameters<typeof TonWeb.utils.BN>[0];
export interface ContractOptions extends TW_ContractOptions {
}
export interface JettonMinterOptions extends TW_JettonMinterOptions {
}
export interface NftItemOptions extends TW_NftItemOptions {
}
export interface NftCollectionOptions extends TW_NftCollectionOptions {
}
/**
 * @type {MessageData}
 *
 * @property {Address} to - Address of the router's Jetton wallet for the swapped token
 * @property {Cell} payload - Payload for transaction
 * @property {BN} gasAmount - Recommended amount of $TON (in nanoTons) sent as gas
 */
export interface MessageData {
    to: Address;
    payload: Cell;
    gasAmount: BN;
}
//# sourceMappingURL=types.d.ts.map