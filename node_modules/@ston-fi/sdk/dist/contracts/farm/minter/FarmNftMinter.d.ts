import type { Address, Cell, HttpProvider, BN, AddressType, QueryIdType, MessageData, AmountType, NftCollectionOptions } from '../../../types';
import type { FarmNftMinterRevision } from './FarmNftMinterRevision';
import { FarmNftMinterRevisionV2 } from './FarmNftMinterRevisionV2';
declare const Address: typeof import("tonweb/dist/types/utils/address").Address, BN: typeof import("bn.js"), NftCollection: typeof import("tonweb/dist/types/contract/token/nft/nft-collection").NftCollection;
declare const REVISIONS: {
    readonly V2: typeof FarmNftMinterRevisionV2;
};
export declare type FarmNftMinterGasConstants = {
    stake: BN;
    stakeForward: BN;
};
/**
 * @typedef {Object} FarmNftMinterData
 *
 * @property {BN} nextItemIndex - Index of the next nft in this collection
 * @property {BN} lastUpdateTime - Last time farming values were updated
 * @property {number} status - Status of the contract: uninitialized `0`, active `1`, paused `3`
 * @property {BN} depositedNanorewards - Deposited rewards in nanounits
 * @property {BN} currentStakedTokens - Number of staked tokens in basic token units
 * @property {BN} accruedPerUnitNanorewards - Number of accrued nanorewards per basic stake token unit
 * @property {BN} claimedFeeNanorewards - Claimed fees @since V2 revision
 * @property {BN} accruedFeeNanorewards - Accrued fees @since V2 revision
 * @property {BN} accruedNanorewards - Total number of accrued rewards in nanounits
 * @property {BN} claimedNanorewards - Number of claimed rewards in nanounits
 * @property {BN} contractUniqueId - Minter id
 * @property {BN} nanorewardsPer24h - Total number of accrued rewards per 24h in nanounits
 * @property {BN} adminFee - Admin fee; divider is 10000 @since V2 revision
 * @property {Boolean} soulboundItems - Whether minted NFTs are soulbound
 * @property {BN} minStakeTime - Minimum staking time
 * @property {Address} stakingTokenWallet - Minter's staking jetton wallet
 * @property {Address} rewardTokenWallet - Minter's reward jetton wallet
 * @property {Address} custodianAddress - Custodian address @since V2 revision
 * @property {Boolean} canChangeCustodian - If can change custodian @since V2 revision
 * @property {Boolean} canSendRawMsg - If can send raw msg @since V2 revision
 * @property {Boolean} canChangeFee - If can change fee @since V2 revision
 * @property {Boolean} unrestrictedDepositRewards - If rewards can be deposited by anyone @since V2 revision
 */
export declare type FarmNftMinterData = {
    nextItemIndex: BN;
    lastUpdateTime: BN;
    status: number;
    depositedNanorewards: BN;
    currentStakedTokens: BN;
    accruedPerUnitNanorewards: BN;
    claimedFeeNanorewards: BN;
    accruedFeeNanorewards: BN;
    accruedNanorewards: BN;
    claimedNanorewards: BN;
    contractUniqueId: BN;
    nanorewardsPer24h: BN;
    adminFee: BN;
    soulboundItems: Boolean;
    minStakeTime: BN;
    stakingTokenWallet: Address;
    rewardTokenWallet: Address;
    custodianAddress: Address | null;
    canChangeCustodian: Boolean;
    canSendRawMsg: Boolean;
    canChangeFee: Boolean;
    unrestrictedDepositRewards: Boolean;
};
/**
 * @since V2 revision
 * @typedef {Object} PendingData
 *
 * @property {BN} changeCustodianTs - Timestamp when 'change_custodian' was initiated
 * @property {BN} sendMsgTs - Timestamp when 'send_raw_msg' was initiated
 * @property {BN} codeUpgradeTs - Timestamp when 'code_upgrade' was initiated
 * @property {Address} newCustodian - New custodian that will be set after confirmation
 * @property {Cell} pendingMsg - Pending msg that will be sends after confirmation
 * @property {Cell} newCode - New contract code that will be set after confirmation
 * @property {Cell} newStorage - New contract storage that will be set after confirmation
 */
export declare type PendingData = {
    changeCustodianTs: BN;
    sendMsgTs: BN;
    codeUpgradeTs: BN;
    newCustodian: Address | null;
    pendingMsg: Cell;
    newCode: Cell;
    newStorage: Cell;
};
/**
 * @since V2 revision
 * @typedef {Object} Version
 *
 * @property {number} major - Major version; breaking changes in api
 * @property {number} minor - Minor version; non-breaking new functionality
 * @property {string} development - Development version; can contain breaking changes
 */
export declare type Version = {
    major: number;
    minor: number;
    development: string;
};
interface FarmNftMinterOptions extends NftCollectionOptions {
    revision: FarmNftMinterRevision | keyof typeof REVISIONS;
    address: AddressType;
}
export declare class FarmNftMinter extends NftCollection {
    private revision;
    constructor(provider: HttpProvider, { revision, ...options }: FarmNftMinterOptions);
    get gasConstants(): FarmNftMinterGasConstants;
    /**
     * Create a payload for the `stake` transaction.
     *
     * @returns payload for the `stake` transaction.
     */
    createStakeBody(): Promise<Cell>;
    /**
     * @returns {Address} address of minter for staking jetton
     */
    getStakingJettonAddress(): Promise<Address>;
    getPendingData(): Promise<PendingData>;
    getVersion(): Promise<Version>;
    /**
     * @returns {FarmNftMinterData} containing current state of the minter
     */
    getData(): Promise<FarmNftMinterData>;
    /**
     * Build all data required to execute a jetton `stake` transaction
     *
     * @param {Address | string} params.userWalletAddress - User's address
     * @param {Address | string} params.jettonAddress - Jetton address of token to be staked
     * @param {BN | number} params.jettonAmount - Amount of tokens to be staked (in basic token units)
     * @param {BN | number | undefined} params.gasAmount - Optional; amount of gas for the transaction (in nanoTons)
     * @param {BN | number | undefined} params.forwardGasAmount - Optional; forward amount of gas for the next transaction (in nanoTons)
     * @param {BN | number | undefined} params.queryId - Optional; query id
     *
     * @returns {MessageData} containing all data required to execute a jetton `stake` transaction
     */
    buildStakeTxParams(params: {
        userWalletAddress: AddressType;
        jettonAddress: AddressType;
        jettonAmount: AmountType;
        gasAmount?: AmountType;
        forwardGasAmount?: AmountType;
        queryId?: QueryIdType;
    }): Promise<MessageData>;
}
export {};
//# sourceMappingURL=FarmNftMinter.d.ts.map