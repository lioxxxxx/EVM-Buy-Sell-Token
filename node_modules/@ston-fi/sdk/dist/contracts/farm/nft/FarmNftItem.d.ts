import type { Cell, HttpProvider, BN, AddressType, QueryIdType, MessageData, AmountType, NftItemOptions } from '../../../types';
import { FarmNftItemRevision } from './FarmNftItemRevision';
import { FarmNftItemRevisionV2 } from './FarmNftItemRevisionV2';
declare const BN: typeof import("bn.js"), NftItem: typeof import("tonweb/dist/types/contract/token/nft/nft-item").NftItem;
declare const REVISIONS: {
    readonly V2: typeof FarmNftItemRevisionV2;
};
export declare type FarmNftItemGasConstants = {
    claimRewards: BN;
    unstake: BN;
    destroy: BN;
};
/**
 * @type {FarmNftItemFarmingData} represent state of the farm NFT
 *
 * @property {number} status Status of the contract: uninitialized `0`, active `1`, unstaked `2`, claiming `3`
 * @property {boolean} isSoulbound If nft is soulbound
 * @property {BN} revokeTime Timestamp of unstake @since V2 revision
 * @property {BN} stakedTokens Amount of staked tokens
 * @property {BN} claimedPerUnitNanorewards `accrued_per_unit_nanorewards` at the time the user made the stake or last claimed rewards
 * @property {BN} stakeDate Timestamp in which the owner started staking
 */
export declare type FarmNftItemFarmingData = {
    status: number;
    isSoulbound: boolean;
    revokeTime: BN;
    stakedTokens: BN;
    claimedPerUnitNanorewards: BN;
    stakeDate: BN;
};
interface FarmNftItemOptions extends NftItemOptions {
    revision: FarmNftItemRevision | keyof typeof REVISIONS;
    address: AddressType;
}
export declare class FarmNftItem extends NftItem {
    private revision;
    constructor(provider: HttpProvider, { revision, ...options }: FarmNftItemOptions);
    get gasConstants(): FarmNftItemGasConstants;
    /**
     * Creates payload for the `claim_rewards` transaction.
     *
     * @param {BN | number | undefined} params.queryId - Optional; query id
     *
     * @returns {Cell} payload for the `claim_rewards` transaction.
     */
    createClaimRewardsBody(params: {
        queryId?: QueryIdType;
    }): Promise<Cell>;
    /**
     * Creates payload for the `destroy` transaction.
     *
     * @param {BN | number | undefined} params.queryId - Optional; query id
     *
     * @returns {Cell} payload for the `destroy` transaction.
     */
    createDestroyBody(params: {
        queryId?: QueryIdType;
    }): Promise<Cell>;
    /**
     * Creates payload for the `unstake` transaction.
     *
     * @param {BN | number | undefined} params.queryId - Optional; query id
     *
     * @returns {Cell} payload for the `unstake` transaction.
     */
    createUnstakeBody(params: {
        queryId?: QueryIdType;
    }): Promise<Cell>;
    /**
     * @returns {FarmNftItemFarmingData} structure containing current state of the farm NFT
     */
    getFarmingData(): Promise<FarmNftItemFarmingData>;
    /**
     * Build all data required to execute a `claim_rewards` transaction.
     *
     * @param {BN | number | undefined} params.gasAmount - Optional; amount of gas for the transaction (in nanoTons)
     * @param {BN | number | undefined} params.queryId - Optional; query id
     *
     * @returns {MessageData} all data required to execute a `claim_rewards` transaction.
     */
    buildClaimRewardsTxParams(params?: {
        gasAmount?: AmountType;
        queryId?: QueryIdType;
    }): Promise<MessageData>;
    /**
     * Build all data required to execute a `unstake` transaction.
     *
     * @param {BN | number | undefined} params.gasAmount - Optional; amount of gas for the transaction (in nanoTons)
     * @param {BN | number | undefined} params.queryId - Optional; query id
     *
     * @returns {MessageData} all data required to execute a `unstake` transaction.
     */
    buildUnstakeTxParams(params?: {
        gasAmount?: AmountType;
        queryId?: QueryIdType;
    }): Promise<MessageData>;
    /**
     * Build all data required to execute a `destroy` transaction.
     *
     * @param {BN | number | undefined} params.gasAmount - Optional; amount of gas for the transaction (in nanoTons)
     * @param {BN | number | undefined} params.queryId - Optional; query id
     *
     * @returns {MessageData} all data required to execute a `destroy` transaction.
     */
    buildDestroyTxParams(params?: {
        gasAmount?: AmountType;
        queryId?: QueryIdType;
    }): Promise<MessageData>;
}
export {};
//# sourceMappingURL=FarmNftItem.d.ts.map